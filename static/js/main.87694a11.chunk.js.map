{"version":3,"sources":["Pages/Home.js","Pages/Login.js","Pages/Pdc.js","serviceWorker.js","index.js"],"names":["Home","to","Login","Pdc","Boolean","window","location","hostname","match","ReactDOM","render","path","exact","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mMAiBeA,EAdF,WACX,OACE,kBAAC,WAAD,KACE,gDACA,6BACE,kBAAC,IAAD,CAAMC,GAAG,mBAAT,sBAEF,6BACE,kBAAC,IAAD,CAAMA,GAAG,iBAAT,oDCMOC,EAdD,WACZ,OACE,kBAAC,WAAD,KACE,iDACA,6BACE,kBAAC,IAAD,CAAMD,GAAG,aAAT,qBAEF,6BACE,kBAAC,IAAD,CAAMA,GAAG,iBAAT,oDCMOE,EAdH,WACV,OACE,kBAAC,WAAD,KACE,6EACA,6BACE,kBAAC,IAAD,CAAMF,GAAG,aAAT,qBAEF,6BACE,kBAAC,IAAD,CAAMA,GAAG,mBAAT,wBCCYG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,YAAYC,OAAO,EAAMC,UAAWb,IAChD,kBAAC,IAAD,CAAOW,KAAK,kBAAkBC,OAAO,EAAMC,UAAWX,IACtD,kBAAC,IAAD,CAAOS,KAAK,gBAAgBC,OAAO,EAAMC,UAAWV,MAGxDW,SAASC,eAAe,SDmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.87694a11.chunk.js","sourcesContent":["import React, { Fragment } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Home = () => {\n  return (\n    <Fragment>\n      <h1>Aqui é a HOME</h1>\n      <div>\n        <Link to=\"/IndSpace/login\">Aqui é o login</Link>\n      </div>\n      <div>\n        <Link to=\"/IndSpace/pdc\">Aqui é o perfil do produtor de conteúdo</Link>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default Home;\n","import React, { Fragment } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Login = () => {\n  return (\n    <Fragment>\n      <h1>Aqui é o Login</h1>\n      <div>\n        <Link to=\"/IndSpace\">Aqui é a home</Link>\n      </div>\n      <div>\n        <Link to=\"/IndSpace/pdc\">Aqui é o perfil do produtor de conteúdo</Link>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default Login;\n","import React, { Fragment } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Pdc = () => {\n  return (\n    <Fragment>\n      <h1>Aqui é o perfil do produtor de conteúdo</h1>\n      <div>\n        <Link to=\"/IndSpace\">Aqui é a home</Link>\n      </div>\n      <div>\n        <Link to=\"/IndSpace/login\">Aqui é o login</Link>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default Pdc;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport Home from \"./Pages/Home\";\nimport Login from \"./Pages/Login\";\nimport Pdc from \"./Pages/Pdc\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <Switch>\n      <Route path=\"/IndSpace\" exact={true} component={Home} />\n      <Route path=\"/IndSpace/login\" exact={true} component={Login} />\n      <Route path=\"/IndSpace/pdc\" exact={true} component={Pdc} />\n    </Switch>\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}